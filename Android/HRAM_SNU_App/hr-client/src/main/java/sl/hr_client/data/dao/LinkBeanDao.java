package sl.hr_client.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import sl.hr_client.data.bean.LinkBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINK_BEAN".
*/
public class LinkBeanDao extends AbstractDao<LinkBean, String> {

    public static final String TABLENAME = "LINK_BEAN";

    /**
     * Properties of entity LinkBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FriendlyLinkID = new Property(0, String.class, "friendlyLinkID", true, "FRIENDLY_LINK_ID");
        public final static Property ULoginName = new Property(1, String.class, "uLoginName", false, "U_LOGIN_NAME");
        public final static Property UUserName = new Property(2, String.class, "uUserName", false, "U_USER_NAME");
        public final static Property FlTypeValue = new Property(3, String.class, "flTypeValue", false, "FL_TYPE_VALUE");
        public final static Property FlName = new Property(4, String.class, "flName", false, "FL_NAME");
        public final static Property FlURL = new Property(5, String.class, "flURL", false, "FL_URL");
        public final static Property FlImgURL = new Property(6, String.class, "flImgURL", false, "FL_IMG_URL");
        public final static Property FlAddTime = new Property(7, String.class, "flAddTime", false, "FL_ADD_TIME");
        public final static Property IsDeleted = new Property(8, boolean.class, "isDeleted", false, "IS_DELETED");
    };


    public LinkBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LinkBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINK_BEAN\" (" + //
                "\"FRIENDLY_LINK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: friendlyLinkID
                "\"U_LOGIN_NAME\" TEXT," + // 1: uLoginName
                "\"U_USER_NAME\" TEXT," + // 2: uUserName
                "\"FL_TYPE_VALUE\" TEXT," + // 3: flTypeValue
                "\"FL_NAME\" TEXT," + // 4: flName
                "\"FL_URL\" TEXT," + // 5: flURL
                "\"FL_IMG_URL\" TEXT," + // 6: flImgURL
                "\"FL_ADD_TIME\" TEXT," + // 7: flAddTime
                "\"IS_DELETED\" INTEGER NOT NULL );"); // 8: isDeleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LinkBean entity) {
        stmt.clearBindings();
 
        String friendlyLinkID = entity.getFriendlyLinkID();
        if (friendlyLinkID != null) {
            stmt.bindString(1, friendlyLinkID);
        }
 
        String uLoginName = entity.getULoginName();
        if (uLoginName != null) {
            stmt.bindString(2, uLoginName);
        }
 
        String uUserName = entity.getUUserName();
        if (uUserName != null) {
            stmt.bindString(3, uUserName);
        }
 
        String flTypeValue = entity.getFlTypeValue();
        if (flTypeValue != null) {
            stmt.bindString(4, flTypeValue);
        }
 
        String flName = entity.getFlName();
        if (flName != null) {
            stmt.bindString(5, flName);
        }
 
        String flURL = entity.getFlURL();
        if (flURL != null) {
            stmt.bindString(6, flURL);
        }
 
        String flImgURL = entity.getFlImgURL();
        if (flImgURL != null) {
            stmt.bindString(7, flImgURL);
        }
 
        String flAddTime = entity.getFlAddTime();
        if (flAddTime != null) {
            stmt.bindString(8, flAddTime);
        }
        stmt.bindLong(9, entity.getIsDeleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LinkBean entity) {
        stmt.clearBindings();
 
        String friendlyLinkID = entity.getFriendlyLinkID();
        if (friendlyLinkID != null) {
            stmt.bindString(1, friendlyLinkID);
        }
 
        String uLoginName = entity.getULoginName();
        if (uLoginName != null) {
            stmt.bindString(2, uLoginName);
        }
 
        String uUserName = entity.getUUserName();
        if (uUserName != null) {
            stmt.bindString(3, uUserName);
        }
 
        String flTypeValue = entity.getFlTypeValue();
        if (flTypeValue != null) {
            stmt.bindString(4, flTypeValue);
        }
 
        String flName = entity.getFlName();
        if (flName != null) {
            stmt.bindString(5, flName);
        }
 
        String flURL = entity.getFlURL();
        if (flURL != null) {
            stmt.bindString(6, flURL);
        }
 
        String flImgURL = entity.getFlImgURL();
        if (flImgURL != null) {
            stmt.bindString(7, flImgURL);
        }
 
        String flAddTime = entity.getFlAddTime();
        if (flAddTime != null) {
            stmt.bindString(8, flAddTime);
        }
        stmt.bindLong(9, entity.getIsDeleted() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LinkBean readEntity(Cursor cursor, int offset) {
        LinkBean entity = new LinkBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // friendlyLinkID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uLoginName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uUserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // flTypeValue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // flName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // flURL
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // flImgURL
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // flAddTime
            cursor.getShort(offset + 8) != 0 // isDeleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LinkBean entity, int offset) {
        entity.setFriendlyLinkID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setULoginName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFlTypeValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFlName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlURL(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlImgURL(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFlAddTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsDeleted(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(LinkBean entity, long rowId) {
        return entity.getFriendlyLinkID();
    }
    
    @Override
    public String getKey(LinkBean entity) {
        if(entity != null) {
            return entity.getFriendlyLinkID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
