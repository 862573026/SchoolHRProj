package sl.hr_client.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import sl.hr_client.data.bean.NewsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_BEAN".
*/
public class NewsBeanDao extends AbstractDao<NewsBean, String> {

    public static final String TABLENAME = "NEWS_BEAN";

    /**
     * Properties of entity NewsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PublishID = new Property(0, String.class, "publishID", true, "PUBLISH_ID");
        public final static Property UUserName = new Property(1, String.class, "uUserName", false, "U_USER_NAME");
        public final static Property PmPublishTime = new Property(2, String.class, "pmPublishTime", false, "PM_PUBLISH_TIME");
        public final static Property PmTypeValue = new Property(3, String.class, "pmTypeValue", false, "PM_TYPE_VALUE");
        public final static Property PmViews = new Property(4, String.class, "pmViews", false, "PM_VIEWS");
        public final static Property PmTitle = new Property(5, String.class, "pmTitle", false, "PM_TITLE");
        public final static Property PmText = new Property(6, String.class, "pmText", false, "PM_TEXT");
        public final static Property PmADImgListID = new Property(7, String.class, "pmADImgListID", false, "PM_ADIMG_LIST_ID");
    };


    public NewsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_BEAN\" (" + //
                "\"PUBLISH_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: publishID
                "\"U_USER_NAME\" TEXT," + // 1: uUserName
                "\"PM_PUBLISH_TIME\" TEXT," + // 2: pmPublishTime
                "\"PM_TYPE_VALUE\" TEXT," + // 3: pmTypeValue
                "\"PM_VIEWS\" TEXT," + // 4: pmViews
                "\"PM_TITLE\" TEXT," + // 5: pmTitle
                "\"PM_TEXT\" TEXT," + // 6: pmText
                "\"PM_ADIMG_LIST_ID\" TEXT);"); // 7: pmADImgListID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsBean entity) {
        stmt.clearBindings();
 
        String publishID = entity.getPublishID();
        if (publishID != null) {
            stmt.bindString(1, publishID);
        }
 
        String uUserName = entity.getUUserName();
        if (uUserName != null) {
            stmt.bindString(2, uUserName);
        }
 
        String pmPublishTime = entity.getPmPublishTime();
        if (pmPublishTime != null) {
            stmt.bindString(3, pmPublishTime);
        }
 
        String pmTypeValue = entity.getPmTypeValue();
        if (pmTypeValue != null) {
            stmt.bindString(4, pmTypeValue);
        }
 
        String pmViews = entity.getPmViews();
        if (pmViews != null) {
            stmt.bindString(5, pmViews);
        }
 
        String pmTitle = entity.getPmTitle();
        if (pmTitle != null) {
            stmt.bindString(6, pmTitle);
        }
 
        String pmText = entity.getPmText();
        if (pmText != null) {
            stmt.bindString(7, pmText);
        }
 
        String pmADImgListID = entity.getPmADImgListID();
        if (pmADImgListID != null) {
            stmt.bindString(8, pmADImgListID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsBean entity) {
        stmt.clearBindings();
 
        String publishID = entity.getPublishID();
        if (publishID != null) {
            stmt.bindString(1, publishID);
        }
 
        String uUserName = entity.getUUserName();
        if (uUserName != null) {
            stmt.bindString(2, uUserName);
        }
 
        String pmPublishTime = entity.getPmPublishTime();
        if (pmPublishTime != null) {
            stmt.bindString(3, pmPublishTime);
        }
 
        String pmTypeValue = entity.getPmTypeValue();
        if (pmTypeValue != null) {
            stmt.bindString(4, pmTypeValue);
        }
 
        String pmViews = entity.getPmViews();
        if (pmViews != null) {
            stmt.bindString(5, pmViews);
        }
 
        String pmTitle = entity.getPmTitle();
        if (pmTitle != null) {
            stmt.bindString(6, pmTitle);
        }
 
        String pmText = entity.getPmText();
        if (pmText != null) {
            stmt.bindString(7, pmText);
        }
 
        String pmADImgListID = entity.getPmADImgListID();
        if (pmADImgListID != null) {
            stmt.bindString(8, pmADImgListID);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NewsBean readEntity(Cursor cursor, int offset) {
        NewsBean entity = new NewsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // publishID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uUserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pmPublishTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pmTypeValue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pmViews
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pmTitle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pmText
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // pmADImgListID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsBean entity, int offset) {
        entity.setPublishID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPmPublishTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPmTypeValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPmViews(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPmTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPmText(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPmADImgListID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NewsBean entity, long rowId) {
        return entity.getPublishID();
    }
    
    @Override
    public String getKey(NewsBean entity) {
        if(entity != null) {
            return entity.getPublishID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
