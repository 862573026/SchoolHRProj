package sl.hr_client.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import sl.hr_client.data.bean.DownloadBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_BEAN".
*/
public class DownloadBeanDao extends AbstractDao<DownloadBean, Long> {

    public static final String TABLENAME = "DOWNLOAD_BEAN";

    /**
     * Properties of entity DownloadBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DownloadID = new Property(1, String.class, "downloadID", false, "DOWNLOAD_ID");
        public final static Property ULoginName = new Property(2, String.class, "uLoginName", false, "U_LOGIN_NAME");
        public final static Property UUserName = new Property(3, String.class, "uUserName", false, "U_USER_NAME");
        public final static Property DmTitle = new Property(4, String.class, "dmTitle", false, "DM_TITLE");
        public final static Property DmTypeID = new Property(5, String.class, "dmTypeID", false, "DM_TYPE_ID");
        public final static Property DmTypeValue = new Property(6, String.class, "dmTypeValue", false, "DM_TYPE_VALUE");
        public final static Property DmFileURL = new Property(7, String.class, "dmFileURL", false, "DM_FILE_URL");
        public final static Property DmDownloadNum = new Property(8, int.class, "dmDownloadNum", false, "DM_DOWNLOAD_NUM");
        public final static Property DmUploadTime = new Property(9, String.class, "dmUploadTime", false, "DM_UPLOAD_TIME");
    };


    public DownloadBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DOWNLOAD_ID\" TEXT," + // 1: downloadID
                "\"U_LOGIN_NAME\" TEXT," + // 2: uLoginName
                "\"U_USER_NAME\" TEXT," + // 3: uUserName
                "\"DM_TITLE\" TEXT," + // 4: dmTitle
                "\"DM_TYPE_ID\" TEXT," + // 5: dmTypeID
                "\"DM_TYPE_VALUE\" TEXT," + // 6: dmTypeValue
                "\"DM_FILE_URL\" TEXT," + // 7: dmFileURL
                "\"DM_DOWNLOAD_NUM\" INTEGER NOT NULL ," + // 8: dmDownloadNum
                "\"DM_UPLOAD_TIME\" TEXT);"); // 9: dmUploadTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downloadID = entity.getDownloadID();
        if (downloadID != null) {
            stmt.bindString(2, downloadID);
        }
 
        String uLoginName = entity.getULoginName();
        if (uLoginName != null) {
            stmt.bindString(3, uLoginName);
        }
 
        String uUserName = entity.getUUserName();
        if (uUserName != null) {
            stmt.bindString(4, uUserName);
        }
 
        String dmTitle = entity.getDmTitle();
        if (dmTitle != null) {
            stmt.bindString(5, dmTitle);
        }
 
        String dmTypeID = entity.getDmTypeID();
        if (dmTypeID != null) {
            stmt.bindString(6, dmTypeID);
        }
 
        String dmTypeValue = entity.getDmTypeValue();
        if (dmTypeValue != null) {
            stmt.bindString(7, dmTypeValue);
        }
 
        String dmFileURL = entity.getDmFileURL();
        if (dmFileURL != null) {
            stmt.bindString(8, dmFileURL);
        }
        stmt.bindLong(9, entity.getDmDownloadNum());
 
        String dmUploadTime = entity.getDmUploadTime();
        if (dmUploadTime != null) {
            stmt.bindString(10, dmUploadTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downloadID = entity.getDownloadID();
        if (downloadID != null) {
            stmt.bindString(2, downloadID);
        }
 
        String uLoginName = entity.getULoginName();
        if (uLoginName != null) {
            stmt.bindString(3, uLoginName);
        }
 
        String uUserName = entity.getUUserName();
        if (uUserName != null) {
            stmt.bindString(4, uUserName);
        }
 
        String dmTitle = entity.getDmTitle();
        if (dmTitle != null) {
            stmt.bindString(5, dmTitle);
        }
 
        String dmTypeID = entity.getDmTypeID();
        if (dmTypeID != null) {
            stmt.bindString(6, dmTypeID);
        }
 
        String dmTypeValue = entity.getDmTypeValue();
        if (dmTypeValue != null) {
            stmt.bindString(7, dmTypeValue);
        }
 
        String dmFileURL = entity.getDmFileURL();
        if (dmFileURL != null) {
            stmt.bindString(8, dmFileURL);
        }
        stmt.bindLong(9, entity.getDmDownloadNum());
 
        String dmUploadTime = entity.getDmUploadTime();
        if (dmUploadTime != null) {
            stmt.bindString(10, dmUploadTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadBean readEntity(Cursor cursor, int offset) {
        DownloadBean entity = new DownloadBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // downloadID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uLoginName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uUserName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dmTitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dmTypeID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dmTypeValue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dmFileURL
            cursor.getInt(offset + 8), // dmDownloadNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // dmUploadTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownloadID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setULoginName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDmTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDmTypeID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDmTypeValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDmFileURL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDmDownloadNum(cursor.getInt(offset + 8));
        entity.setDmUploadTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
