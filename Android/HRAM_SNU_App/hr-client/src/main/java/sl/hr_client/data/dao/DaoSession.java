package sl.hr_client.data.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import sl.hr_client.data.bean.DownloadBean;
import sl.hr_client.data.bean.LinkBean;
import sl.hr_client.data.bean.MemberBean;
import sl.hr_client.data.bean.NewsBean;
import sl.hr_client.data.bean.UserBean;

import sl.hr_client.data.dao.DownloadBeanDao;
import sl.hr_client.data.dao.LinkBeanDao;
import sl.hr_client.data.dao.MemberBeanDao;
import sl.hr_client.data.dao.NewsBeanDao;
import sl.hr_client.data.dao.UserBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig downloadBeanDaoConfig;
    private final DaoConfig linkBeanDaoConfig;
    private final DaoConfig memberBeanDaoConfig;
    private final DaoConfig newsBeanDaoConfig;
    private final DaoConfig userBeanDaoConfig;

    private final DownloadBeanDao downloadBeanDao;
    private final LinkBeanDao linkBeanDao;
    private final MemberBeanDao memberBeanDao;
    private final NewsBeanDao newsBeanDao;
    private final UserBeanDao userBeanDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        downloadBeanDaoConfig = daoConfigMap.get(DownloadBeanDao.class).clone();
        downloadBeanDaoConfig.initIdentityScope(type);

        linkBeanDaoConfig = daoConfigMap.get(LinkBeanDao.class).clone();
        linkBeanDaoConfig.initIdentityScope(type);

        memberBeanDaoConfig = daoConfigMap.get(MemberBeanDao.class).clone();
        memberBeanDaoConfig.initIdentityScope(type);

        newsBeanDaoConfig = daoConfigMap.get(NewsBeanDao.class).clone();
        newsBeanDaoConfig.initIdentityScope(type);

        userBeanDaoConfig = daoConfigMap.get(UserBeanDao.class).clone();
        userBeanDaoConfig.initIdentityScope(type);

        downloadBeanDao = new DownloadBeanDao(downloadBeanDaoConfig, this);
        linkBeanDao = new LinkBeanDao(linkBeanDaoConfig, this);
        memberBeanDao = new MemberBeanDao(memberBeanDaoConfig, this);
        newsBeanDao = new NewsBeanDao(newsBeanDaoConfig, this);
        userBeanDao = new UserBeanDao(userBeanDaoConfig, this);

        registerDao(DownloadBean.class, downloadBeanDao);
        registerDao(LinkBean.class, linkBeanDao);
        registerDao(MemberBean.class, memberBeanDao);
        registerDao(NewsBean.class, newsBeanDao);
        registerDao(UserBean.class, userBeanDao);
    }
    
    public void clear() {
        downloadBeanDaoConfig.getIdentityScope().clear();
        linkBeanDaoConfig.getIdentityScope().clear();
        memberBeanDaoConfig.getIdentityScope().clear();
        newsBeanDaoConfig.getIdentityScope().clear();
        userBeanDaoConfig.getIdentityScope().clear();
    }

    public DownloadBeanDao getDownloadBeanDao() {
        return downloadBeanDao;
    }

    public LinkBeanDao getLinkBeanDao() {
        return linkBeanDao;
    }

    public MemberBeanDao getMemberBeanDao() {
        return memberBeanDao;
    }

    public NewsBeanDao getNewsBeanDao() {
        return newsBeanDao;
    }

    public UserBeanDao getUserBeanDao() {
        return userBeanDao;
    }

}
